import React, { useState, useEffect } from 'react';
import { useHistory } from 'react-router-dom';
import { connect } from 'react-redux'
import PropTypes from 'prop-types';

import { Form, Field } from 'react-final-form';
import { TextField } from 'final-form-material-ui';

import createDecorator from 'final-form-focus';

import { makeStyles } from '@material-ui/core/styles';

import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import Button from '@material-ui/core/Button';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';

import {
  Typography,
  Table,
  TableBody,
  TableHead,
  TableRow,
  TableCell,
} from '@material-ui/core';

import { FfmTextField, FfmSelect } from '../../utils/final-form-mui';
import { composeValidators, required, mustBeNumber, mustBePostalUS } from '../../validators';

import useDebounce from '../../useDebounce';

import { checkoutConfirmAction, checkoutCanelAction } from '../../stores/actions/csr-checkout-actions';

import { buildTableProducts, } from '../subpages/CsrChangePlansSubPage.helper';

const useStyles = makeStyles(theme => ({
  root: {
    margin: theme.spacing(1),
    flexGrow: 1,
  },
  container: {
    alignItems: 'flex-start',
  },
  form: {
    flexGrow: 1,
  },
  paper: {
    margin: theme.spacing(1),
    color: theme.palette.text.secondary,
    // strike-through fields that are empty and disabled to better readability
    '& label.Mui-disabled[data-shrink="false"]': {
      textDecoration: 'line-through',
    }
  },
  submitButtonGrid: {
    justifyContent: 'flex-end',
  },
  confirmButtonGrid: {
    justifyContent: 'flex-end',
    marginLeft: theme.spacing(1),
    marginRight: theme.spacing(1),
  },
  submitButtonList: {
    display: 'flex',
    whiteSpace: 'nowrap',
  },
  submitButtonListItem: {
    paddingLeft: 0,
    paddingRight: theme.spacing(2),
    marginBottom: theme.spacing(1),
  },
  table: {
    flexGrow: 1,
    marginLeft: theme.spacing(3),
    marginRight: theme.spacing(3),
  },
  tableRow: {
    '&:nth-child(odd)': { // stripe body rows
      backgroundColor: theme.palette.background.default,
    },
    '&:last-child': { // keep total unchanged
      backgroundColor: theme.palette.background.paper,
    },
  },
  submitButton: {
    float: 'right',
  },
}));

const focusOnError = createDecorator()

/**
 * Main customer page containing account, device, plans and billing subpages
 * 
 * @param {object} state [required] - Redux state
 * @param {object} dispatch [required] - Redux object that contains dispatch functions
 * @param {object} match [required] - React-Router match generated by parent component path regular expression that is used to determine customer_id
 */
function CsrCheckoutPage({state, dispatch}) {
  const history = useHistory();
  const classes = useStyles();
  const debouncer = useDebounce();
  const [purchasing, setPurchasing] = useState();

  // dispatch pending action
  const handleChangeConfirm = (event) => {
    dispatch.confirm(state.csr_checkout_action)
  }

  // delete pending action and redirect to customer account page
  const handleChangeCancel = (event) => {
    dispatch.cancel();
    history.goBack(); // go to previous page
  }

  // build purchased table
  useEffect(() => {
    if (state.csr_checkout_product_codes) {
      // set local state
      setPurchasing(buildTableProducts(state.csr_checkout_product_codes));
    } else {
      setPurchasing();
    }
  }, [state.csr_checkout_product_codes]);

  // redirect to customer page on success
  useEffect(() => {
    // if checkout confirmed then redirect to existing or new customer or go back to previous page
    if (state.csr_checkout_confirmed) {
      // redirect to new or existing customer
      if (state.csr_checkout_confirmed.customer_id) {
        history.push(`/customer/${state.csr_checkout_confirmed.customer_id}/account`)
      }
      // or go back to previous page
      else {
        history.goBack();
      }
    }

    // ignore history dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [state.csr_checkout_confirmed]);

  return (
    <Grid className={classes.container} container>
      {state.csr_checkout_customer &&
      <Grid container item xs={12} sm={12} md={6}>
        <Grid container item xs={12}>
          <Typography variant="h6">
            New Account
          </Typography>
        </Grid>
        <Grid container item xs={12}>
          <Form
            onSubmit={(values, form, complete)=>{}} // no-op
            render={({ handleSubmit, form, values, submitting, dirty }) => (
              <form onSubmit={handleSubmit} className={classes.form} noValidate>
                <Paper elevation={/* disable shadows */0} className={classes.paper}>
                  <List>
                    <ListItem>
                      <h3>Customer Details</h3>
                    </ListItem>
                    <ListItem>
                      <Field
                        name="username"
                        initialValue={state.csr_checkout_customer.username}
                        component={TextField}
                        variant="outlined"
                        label="Username"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <h3>Contact Information</h3>
                    </ListItem>
                    <ListItem>
                      <Field
                        name="first_name"
                        initialValue={state.csr_checkout_customer.first_name}
                        component={TextField}
                        variant="outlined"
                        label="First Name"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="last_name"
                        initialValue={state.csr_checkout_customer.last_name}
                        component={TextField}
                        variant="outlined"
                        label="Last Name"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="email"
                        initialValue={state.csr_checkout_customer.email}
                        component={TextField}
                        variant="outlined"
                        label="E-mail"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="phone_number"
                        initialValue={state.csr_checkout_customer.phone_number}
                        component={TextField}
                        variant="outlined"
                        label="Phone"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                  </List>
                  <List>
                    <ListItem>
                      <h3>Mailing Address</h3>
                    </ListItem>
                    <ListItem>
                      <Field
                        name="mailing_address.mailing_address_line_1"
                        initialValue={state.csr_checkout_customer.mailing_address.mailing_address_line_1}
                        component={TextField}
                        variant="outlined"
                        label="Address Line 1"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="mailing_address.mailing_address_line_2"
                        initialValue={state.csr_checkout_customer.mailing_address.mailing_address_line_2}
                        component={TextField}
                        variant="outlined"
                        label="Address Line 2"
                        fullWidth
                        disabled
                        // InputLabelProps={!state.csr_checkout_customer.mailing_address.mailing_address_line_2 && {
                        //   style: {textDecoration: 'line-through'}
                        // }}
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="mailing_address.mailing_city"
                        initialValue={state.csr_checkout_customer.mailing_address.mailing_city}
                        component={TextField}
                        variant="outlined"
                        label="City"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="mailing_address.mailing_state"
                        initialValue={state.csr_checkout_customer.mailing_address.mailing_state}
                        component={TextField}
                        variant="outlined"
                        label="State"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="mailing_address.mailing_postal_code"
                        initialValue={state.csr_checkout_customer.mailing_address.mailing_postal_code}
                        component={TextField}
                        variant="outlined"
                        label="Postal Code"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="mailing_address.mailing_country"
                        initialValue={state.csr_checkout_customer.mailing_address.mailing_country}
                        component={TextField}
                        variant="outlined"
                        label="Country"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                  </List>
                </Paper>
              </form>
            )
          } />
        </Grid>
      </Grid>
      }
      {state.csr_checkout_base_address &&
      <Grid container item xs={12} sm={12} md={6}>
        <Grid container item xs={12}>
          <Typography variant="h6">
            Base Address
          </Typography>
        </Grid>
        <Grid container item xs={12}>
          <Form
            onSubmit={(values, form, complete)=>{}} // no-op
            render={({ handleSubmit, form, values, submitting, dirty }) => (
              <form onSubmit={handleSubmit} className={classes.form} noValidate>
                <Paper elevation={/* disable shadows */0} className={classes.paper}>
                  <List>
                    <ListItem>
                      <Field
                        name="base"
                        initialValue={state.csr_checkout_base_address.base}
                        component={TextField}
                        variant="outlined"
                        label="Username"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="area"
                        initialValue={state.csr_checkout_base_address.area}
                        component={TextField}
                        variant="outlined"
                        label="Area"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="building"
                        initialValue={state.csr_checkout_base_address.building}
                        component={TextField}
                        variant="outlined"
                        label="Building"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                    <ListItem>
                      <Field
                        name="room"
                        initialValue={state.csr_checkout_base_address.room}
                        component={TextField}
                        variant="outlined"
                        label="Room"
                        fullWidth
                        disabled
                      />
                    </ListItem>
                  </List>
                </Paper>
              </form>
            )
          } />
        </Grid>
      </Grid>
      }
      {purchasing &&
      <Grid container item xs={12} sm={12} md={6}>
        <Grid container item xs={12}>
          <Typography variant="h6">
            Order Summary
          </Typography>
        </Grid>
        <Grid container item xs={12}>
          <Paper className={`${classes.table} ${classes.paper}`}>
            <Table aria-label="order summary">
              <TableHead>
                <TableRow>
                  <TableCell>Product Name</TableCell>
                  <TableCell align="right">Price</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {purchasing.map(row => (
                  <TableRow key={row.name} className={classes.tableRow}>
                    <TableCell component="th" scope="row">
                      {row.name}
                    </TableCell>
                    <TableCell align="right">{row.price}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </Paper>
        </Grid>
        <Grid container item xs={12} className={classes.confirmButtonGrid}>
          <List className={classes.submitButtonList}>
            <ListItem className={classes.submitButtonListItem}>
              <Button
                className={classes.submitButton}
                variant="contained"
                onClick={handleChangeCancel}
                disabled={state.csr_checkout_confirming}
              >
                Cancel
              </Button>
            </ListItem>
            <ListItem className={classes.submitButtonListItem}>
              <Button
                className={classes.submitButton}
                variant="contained"
                color="secondary"
                onClick={handleChangeConfirm}
                disabled={!state.csr_checkout_action || state.csr_checkout_confirming}
              >
                Confirm Change
              </Button>
            </ListItem>
          </List>
        </Grid>
      </Grid>
      }
      {state.csr_customer && state.csr_checkout_show_billing &&
      <Grid container item xs={12} sm={12} md={6}>
        <Grid container item xs={12}>
          <Typography variant="h6">
            Billing
          </Typography>
        </Grid>
        <Grid container item xs={12}>
          <Form
            decorators={[focusOnError]}
            onSubmit={debouncer((values, form, complete) => {
              console.log('hello', values);
            })}
            validate={values => ({
              payment_cc: {
                credit_card_year: values.payment_cc && (
                    values.payment_cc.credit_card_month > new Date().getMonth() || // cc month is +1 vs getMonth()
                    values.payment_cc.credit_card_year > new Date().getFullYear().toString().substring(2)
                  ) ? undefined : 'Expiration cannot be in the past'
                }
            })}
            render={({ handleSubmit, form, values, submitting, dirty }) => (
              <form onSubmit={handleSubmit} className={classes.form} noValidate>
                <Paper elevation={/* disable shadows */0} className={classes.paper}>
                  <Grid container alignItems="flex-start">
                    <Grid item xs={12}>
                      <List>
                        <ListItem>
                          <FfmTextField
                            name="payment_cc.credit_card_number"
                            initialValue=""
                            uncontrolled={true}
                            uncontrolledValue={values.payment_cc && values.payment_cc.credit_card_number}
                            FormControlProps={{
                              fullWidth: true,
                            }}
                            TextFieldProps={{
                              variant: 'outlined',
                              label: `Credit Card Number (************${state.csr_customer.credit_card_last_4})`,
                              required: true,
                            }}
                            inputProps={{
                              maxLength: 16,
                            }}
                            validate={composeValidators(
                              required(),
                              mustBeNumber(),
                            )}
                          />
                        </ListItem>
                        <ListItem>
                          <FfmTextField
                            name="payment_cc.cvv2"
                            uncontrolled={true}
                            uncontrolledValue={values.payment_cc && values.payment_cc.cvv2}
                            FormControlProps={{
                              fullWidth: true,
                            }}
                            TextFieldProps={{
                              variant: 'outlined',
                              label: 'CVV',
                            }}
                            inputProps={{
                              maxLength: 4,
                            }}
                            validate={composeValidators(
                              required(),
                              mustBeNumber(),
                            )}
                          />
                        </ListItem>
                        <ListItem>
                          <Field
                            name="payment_cc.credit_card_expiration"
                            initialValue={
                              (values.payment_cc &&
                              values.payment_cc.credit_card_month &&
                              values.payment_cc.credit_card_year) ?
                              (values.payment_cc.credit_card_month + values.payment_cc.credit_card_year)
                              :
                              ''
                            }
                            InputProps={{
                              inputProps: {
                                maxLength: 4,
                              }
                            }}
                            component={TextField}
                            variant="outlined"
                            label="Credit Card Expiration"
                            fullWidth
                            disabled={true}
                          />
                        </ListItem>
                      </List>
                    </Grid>
                    <Grid item sm={6} xs={12}>
                      <List>
                        <ListItem>
                          <FfmSelect
                            name="payment_cc.credit_card_month"
                            initialValue={state.csr_customer.payment_cc && state.csr_customer.payment_cc.credit_card_expiration.substring(0,2)}
                            native={true}
                            FormControlProps={{
                              fullWidth: true,
                            }}
                            TextFieldProps={{
                              variant: 'outlined',
                              label: 'Month',
                              required: true,
                            }}
                            validate={composeValidators(
                              required(),
                            )}
                          >
                            <option value=""></option>
                            {[...Array(12)].map((item, index) => {
                              const month = new Date(2019, index, 10).toLocaleString('default', {month: 'long'});
                              return <option key={month} value={(index+1).toString().padStart(2,'0')}>{month}</option>;
                            })}
                          </FfmSelect>
                        </ListItem>
                      </List>
                    </Grid>
                    <Grid item sm={6} xs={12}>
                      <List>
                        <ListItem>
                          <FfmSelect
                            name="payment_cc.credit_card_year"
                            initialValue={state.csr_customer.payment_cc && state.csr_customer.payment_cc.credit_card_expiration.substring(2)}
                            native={true}
                            FormControlProps={{
                              fullWidth: true,
                            }}
                            TextFieldProps={{
                              variant: 'outlined',
                              label: 'Year',
                              required: true,
                            }}
                            validate={composeValidators(
                              required(),
                            )}
                          >
                            <option value=""></option>
                            {[...Array(15)].map((item, index) => {
                              const year = new Date().getFullYear() + index;
                              return <option key={year} value={year.toString().substring(2)}>{year}</option>;
                            })}
                          </FfmSelect>
                        </ListItem>
                      </List>
                    </Grid>
                    <Grid item xs={12}>
                      <List>
                        <ListItem>
                          <FfmTextField
                            name="payment_cc.postal_code"
                            initialValue={state.csr_customer.payment_cc && state.csr_customer.payment_cc.postal_code}
                            uncontrolled={true}
                            uncontrolledValue={values.payment_cc && values.payment_cc.postal_code}
                            FormControlProps={{
                              fullWidth: true,
                            }}
                            TextFieldProps={{
                              variant: 'outlined',
                              label: 'Billing ZIP Code',
                              required: true,
                            }}
                            validate={composeValidators(
                              required(),
                              mustBePostalUS(),
                            )}
                          />
                        </ListItem>
                      </List>
                    </Grid>
                    <Grid container item xs={12} className={classes.submitButtonGrid}>
                      <List className={classes.submitButtonList}>
                        <ListItem className={classes.submitButtonListItem}>
                          <Button
                            className={classes.submitButton}
                            variant="contained"
                            onClick={form.reset}
                          >
                            Reset
                          </Button>
                        </ListItem>
                        <ListItem className={classes.submitButtonListItem}>
                          <Button
                            type="submit"
                            className={classes.submitButton}
                            variant="contained"
                            color="primary"
                          >
                            Save Billing
                          </Button>
                        </ListItem>
                      </List>
                    </Grid>
                  </Grid>
                </Paper>
              </form>
            )
          } />
        </Grid>
      </Grid>
      }
    </Grid>
  );
}
// type declaration and enforcement
CsrCheckoutPage.propTypes = {
  state: PropTypes.object.isRequired,
  dispatch: PropTypes.object.isRequired,
};

const mapStateToProps = (state) => ({
  state: {
    ...state.csrAuthReducer,
    ...state.csrCustomerReducer,
    ...state.csrCheckoutReducer,
  }
});

const mapDispatchToProps = (dispatch) => ({
  dispatch: { // dispatch pending action from previous page (eg. change plans subpage)
    confirm: (checkout_action) => {
      dispatch(checkoutConfirmAction({
        action: checkout_action
      }));
    },
    cancel: () => {
      dispatch(checkoutCanelAction());
    },
  }
});

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(CsrCheckoutPage)