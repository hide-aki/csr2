import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux'
import { withRouter } from "react-router";

import { makeStyles } from '@material-ui/core/styles';

import Paper from '@material-ui/core/Paper';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TablePagination from '@material-ui/core/TablePagination';
import TableRow from '@material-ui/core/TableRow';
import Typography from '@material-ui/core/Typography';

import CsrPaymentHistory from '../sections/CsrPaymentHistory';

import { ACTION_CSR_FETCH_DEFERRED_ACTIONS } from '../../stores/actions/csr-plans-actions';

const columns = [
  {
    id: 'status',
    label: 'Status',
    minWidth: 100,
    default: 'COMPLETED'
  },
  {
    id: 'created_date',
    label: 'Created',
    minWidth: 100
  },
  {
    id: 'updated_date',
    label: 'Updated',
    minWidth: 100
  },
  {
    id: 'scheduled_time',
    label: 'Effective',
    minWidth: 100
  },
  {
    id: 'action_name',
    label: 'Action',
    minWidth: 100
  },
  {
    id: 'description',
    label: 'Description',
    minWidth: 100
  },
];

/*
function createData(date, note, user) {
  return { date, note, user };
}

const rows = [
  createData('2019/08/05', 'Some Note', 'admin'),
];
*/

const useStyles = makeStyles({
  root: {
    width: '100%',
  },
  tableWrapper: {
    overflow: 'auto',
  },
});

/**
 * Plans portion of customer page used to display deferred actions and active (maybe inactive) plans (to-be-added)
 * 
 * @param {object} state [required] - Redux state
 * @param {object} dispatch [required] - Redux object that contains dispatch functions
 * @param {object} match [required] - React-Router match generated by parent component path regular expression that is used to determine customer_id
 */
function CsrPlansSubPage({state, dispatch, match}) {
  const classes = useStyles();
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(10);

  function handleChangePage(event, newPage) {
    setPage(newPage);
  }

  function handleChangeRowsPerPage(event) {
    setRowsPerPage(+event.target.value);
    setPage(0);
  }

  // fetch customer data needed for plans
  useEffect(() => {
    // if authenticated and customer deferred actions is empty for requested customer and is not requesting
    if ( state.csr_auth
          && !state.csr_deferred_actions_requesting
          && (!state.csr_deferred_actions || String(state.csr_deferred_actions.customer_id) !== match.params.customer_id) ) // deferred actions empty or empty for requested customer
    {
      dispatch.csrFetchDeferredActions({
        token: state.csr_auth.token,
        customer_id: match.params.customer_id
      });
    }
    // disable lint dependency checks since we want to run customer change
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [state.csr_auth, state.csr_deferred_actions_reload, match.params.customer_id]);

  return (
    <React.Fragment>
      <CsrPaymentHistory/>
      <Typography variant="h5" align="left" component="h5" gutterBottom>
        Pending Changes
      </Typography>
      <Paper className={classes.root}>
        <div className={classes.tableWrapper}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                {columns.map(column => (
                  <TableCell
                    key={column.id}
                    align={column.align}
                    style={{ minWidth: column.minWidth }}
                  >
                    {column.label}
                  </TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {state.csr_deferred_actions && state.csr_deferred_actions.deferred_actions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row,row_index) => (
              <TableRow hover role="checkbox" tabIndex={-1} key={row.action_id}>
                {columns.map((column) => {
                  const value = row[column.id] || column.default;
                  return (
                    <TableCell key={column.id+row_index} align={column.align}>
                      {column.format && typeof value === 'number' ? column.format(value) : value}
                    </TableCell>
                  );
                })}
              </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        <TablePagination
          rowsPerPageOptions={[10, 25, 100]}
          component="div"
          count={(state.csr_deferred_actions && state.csr_deferred_actions.deferred_actions.length) || 0}
          rowsPerPage={rowsPerPage}
          page={page}
          backIconButtonProps={{
            'aria-label': 'previous page',
          }}
          nextIconButtonProps={{
            'aria-label': 'next page',
          }}
          onChangePage={handleChangePage}
          onChangeRowsPerPage={handleChangeRowsPerPage}
        />
      </Paper>
    </React.Fragment>
  );
}
// type declaration and enforcement
CsrPlansSubPage.propTypes = {
  state: PropTypes.object.isRequired,
  dispatch: PropTypes.object.isRequired,
  match: PropTypes.object.isRequired,
};

const mapStateToProps = (state) => ({
  state: {
    ...state.csrAuthReducer,
    ...state.csrDeferredActionsReducer,
  }
});

const mapDispatchToProps = (dispatch) => ({
  dispatch: {
    csrFetchDeferredActions: (payload) => dispatch({
      type: ACTION_CSR_FETCH_DEFERRED_ACTIONS,
      payload
    }),
  }
});

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(withRouter(CsrPlansSubPage))